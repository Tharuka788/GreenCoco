import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { toast } from 'react-toastify';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

const TransactionsPage = () => {
  const [transactions, setTransactions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [dateRange, setDateRange] = useState({
    startDate: '',
    endDate: '',
  });

  useEffect(() => {
    fetchTransactions();
  }, []);

  const fetchTransactions = async () => {
    try {
      setLoading(true);
      setError(null);
      const response = await axios.get('http://localhost:5000/api/finance/transactions');
      setTransactions(response.data);
    } catch (error) {
      console.error('Error fetching transactions:', error);
      setError('Failed to fetch transactions. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  const handleDateChange = (e) => {
    const { name, value } = e.target;
    setDateRange((prev) => ({ ...prev, [name]: value }));
  };

  const filterTransactions = () => {
    if (!dateRange.startDate || !dateRange.endDate) return transactions;

    const start = new Date(dateRange.startDate);
    const end = new Date(dateRange.endDate);
    end.setHours(23, 59, 59, 999);

    return transactions.filter((transaction) => {
      const transactionDate = new Date(transaction.date);
      return transactionDate >= start && transactionDate <= end;
    });
  };

  const calculateSummary = (filteredTransactions) => {
    const totalIncome = filteredTransactions
      .filter((t) => t.type === 'Income')
      .reduce((sum, t) => sum + t.amount, 0);
    const totalExpenses = filteredTransactions
      .filter((t) => t.type === 'Expense')
      .reduce((sum, t) => sum + t.amount, 0);
    const netProfit = totalIncome - totalExpenses;

    return { totalIncome, totalExpenses, netProfit };
  };

  const downloadPDF = () => {
    const filteredTransactions = filterTransactions();
    const { totalIncome, totalExpenses, netProfit } = calculateSummary(filteredTransactions);

    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const margin = 14;
    const startY = 20;

    doc.setFontSize(18);
    doc.setFont('helvetica', 'bold');
    doc.text('Coconut Waste Management System', pageWidth / 2, startY, { align: 'center' });
    doc.setFontSize(14);
    doc.text('Financial Transactions Report', pageWidth / 2, startY + 10, { align: 'center' });

    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    const dateRangeText = dateRange.startDate && dateRange.endDate
      ? `${dateRange.startDate} to ${dateRange.endDate}`
      : 'All Transactions';
    doc.text(`Date Range: ${dateRangeText}`, margin, startY + 20);
    doc.text('Generated by: Admin User', margin, startY + 26);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, margin, startY + 32);

    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Summary', margin, startY + 42);
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(10);
    doc.text(`Total Income: LKR ${totalIncome.toFixed(2)}`, margin, startY + 48);
    doc.text(`Total Expenses: LKR ${totalExpenses.toFixed(2)}`, margin, startY + 54);
    doc.text(`Net Profit: LKR ${netProfit.toFixed(2)}`, margin, startY + 60);

    const tableData = filteredTransactions.map((transaction) => [
      transaction.type,
      transaction.source || transaction.category || transaction.employeeId || '-',
      `LKR ${transaction.amount.toFixed(2)}`,
      new Date(transaction.date).toLocaleDateString(),
      transaction.description || '-',
    ]);

    autoTable(doc, {
      startY: startY + 70,
      head: [['Type', 'Source/Category', 'Amount (LKR)', 'Date', 'Description']],
      body: tableData,
      theme: 'striped',
      headStyles: { fillColor: [50, 142, 110], textColor: [255, 255, 255] },
      styles: { fontSize: 8, cellPadding: 3 },
      columnStyles: {
        0: { cellWidth: 25 },
        1: { cellWidth: 40 },
        2: { cellWidth: 30 },
        3: { cellWidth: 25 },
        4: { cellWidth: 50 },
      },
    });

    doc.save('Financial_Transactions_Report.pdf');
    toast.success('PDF report downloaded successfully!');
  };

  const styles = `
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');

    .transactions-page {
      margin-top: 80px; /* Space for the fixed MainNavbar */
      padding: 30px;
      flex-grow: 1;
      background: #ffffff;
      min-height: 100vh;
      font-family: 'Poppins', sans-serif;
    }

    .transactions-page h1 {
      margin-bottom: 30px;
      color: #2a7458;
      font-weight: 600;
      font-size: 2.5rem;
      text-align: center;
      text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
    }

    .filter-container {
      margin-bottom: 30px;
      padding: 25px;
      background: #f5f7fa;
      border-radius: 12px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 15px;
    }

    .filter-container label {
      display: flex;
      flex-direction: column;
      color: #2a7458;
      font-weight: 400;
      font-size: 1rem;
    }

    .filter-container input {
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 6px;
      font-size: 1rem;
      font-family: 'Poppins', sans-serif;
      transition: border-color 0.3s ease;
      margin-top: 5px;
    }

    .filter-container input:focus {
      outline: none;
      border-color: #328e6e;
      box-shadow: 0 0 5px rgba(50, 142, 110, 0.3);
    }

    .filter-container button {
      padding: 12px 20px;
      background: #328e6e;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 1rem;
      font-family: 'Poppins', sans-serif;
      transition: background 0.3s ease, transform 0.1s ease;
    }

    .filter-container button:hover {
      background: #46b38a;
      transform: scale(1.02);
    }

    .filter-container button:active {
      transform: scale(0.98);
    }

    .transactions-list {
      margin-top: 30px;
      padding: 25px;
      background: #f5f7fa;
      border-radius: 12px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      max-width: 1000px;
      margin-left: auto;
      margin-right: auto;
    }

    .transactions-list h2 {
      margin-top: 0;
      margin-bottom: 20px;
      color: #2a7458;
      font-weight: 600;
      font-size: 1.5rem;
      text-align: center;
    }

    .transactions-list table {
      width: 100%;
      border-collapse: collapse;
    }

    .transactions-list th,
    .transactions-list td {
      padding: 10px;
      text-align: left;
      border-bottom: 1px solid #ddd;
      font-size: 0.95rem;
      color: #5e6d55;
    }

    .transactions-list th {
      color: #2a7458;
      font-weight: 600;
    }

    .transactions-list tr:hover {
      background: #e6f0ea;
    }

    .loading {
      text-align: center;
      color: #2a7458;
      font-size: 1rem;
      margin-top: 20px;
    }

    .error-message {
      text-align: center;
      color: #e74c3c;
      font-size: 1rem;
      margin-top: 20px;
    }

    @media (max-width: 768px) {
      .transactions-page {
        margin-top: 120px; /* Adjust for taller MainNavbar */
        padding: 20px;
      }

      .filter-container {
        flex-direction: column;
        align-items: stretch;
      }

      .filter-container button {
        width: 100%;
      }

      .transactions-list {
        overflow-x: auto;
      }
    }

    @media (max-width: 480px) {
      .transactions-page {
        padding: 15px;
      }

      .transactions-list th,
      .transactions-list td {
        font-size: 0.85rem;
        padding: 8px;
      }
    }
  `;

  const filteredTransactions = filterTransactions();

  return (
    <>
      <style dangerouslySetInnerHTML={{ __html: styles }} />
      <div className="transactions-page">
        <h1>All Transactions</h1>
        <div className="filter-container">
          <label>
            Start Date:
            <input
              type="date"
              name="startDate"
              value={dateRange.startDate}
              onChange={handleDateChange}
            />
          </label>
          <label>
            End Date:
            <input
              type="date"
              name="endDate"
              value={dateRange.endDate}
              onChange={handleDateChange}
            />
          </label>
          <button onClick={downloadPDF}>Download PDF Report</button>
        </div>

        <div className="transactions-list">
          <h2>Transaction Records</h2>
          {loading ? (
            <div className="loading">Loading...</div>
          ) : error ? (
            <div className="error-message">{error}</div>
          ) : filteredTransactions.length > 0 ? (
            <table>
              <thead>
                <tr>
                  <th>Type</th>
                  <th>Source/Category</th>
                  <th>Amount (LKR)</th>
                  <th>Date</th>
                  <th>Description</th>
                </tr>
              </thead>
              <tbody>
                {filteredTransactions.map((transaction) => (
                  <tr key={transaction._id}>
                    <td>{transaction.type}</td>
                    <td>{transaction.source || transaction.category || transaction.employeeId || '-'}</td>
                    <td>LKR {transaction.amount.toFixed(2)}</td>
                    <td>{new Date(transaction.date).toLocaleDateString()}</td>
                    <td>{transaction.description || '-'}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          ) : (
            <p>No transactions found for the selected date range.</p>
          )}
        </div>
      </div>
    </>
  );
};

export default TransactionsPage;